# -*- coding: utf-8 -*-
import sys
import math
import os
import re
import string
import pickle

def main():
    mydict = pickle.load(open('hmmmodel.txt', 'rb'))
    test_file = open(sys.argv[1], 'r',encoding="utf8")
    trans_mat = mydict[0]
    emission_mat = mydict[1]
    valid_trans=mydict[2]
    tags=mydict[3]
    probability={}
    backpointer={}
    output = open('hmmoutput.txt', 'w')

    for line in test_file:
        wordlist = line.split(" ")
        backpointer = {}
        probability = {}

        if wordlist[0].rstrip() in valid_trans:
            initial_list = valid_trans[wordlist[0].rstrip()]
        else:
            initial_list = tags

        for each_tag in initial_list:
            probability[0] = {}
            if(wordlist[0].rstrip() in emission_mat[each_tag]):
                probability[0][each_tag] = trans_mat['s0'][each_tag] * emission_mat[each_tag][wordlist[0].rstrip()]
            else:
                probability[0][each_tag] = trans_mat['s0'][each_tag]
            backpointer[0] = {}
            backpointer[0][each_tag] = 's0'

        for index in range(1,len(wordlist)):
            inner_list = []
            outer_list = []
            if wordlist[index].rstrip() in valid_trans:
                outer_list= valid_trans[wordlist[index].rstrip()]
            else:
                outer_list=tags

            for each_tag in outer_list:
                highest=-1.0
                max_tag=''

                inner_list = probability[index-1]

                for each in inner_list:
                    if (wordlist[index].rstrip() in emission_mat[each_tag]):
                        curr_max = probability[index-1][each] * emission_mat[each_tag][wordlist[index].rstrip()] * trans_mat[each][each_tag]
                    else:
                        curr_max = probability[index-1][each] * trans_mat[each][each_tag]
                    if (highest < curr_max):
                        highest = curr_max

                if index not in probability:
                    probability[index] = {}

                probability[index][each_tag] = highest

                highest = -1.0
                for each in inner_list:
                    curr_max = probability[index - 1][each] * trans_mat[each][each_tag]
                    if (highest < curr_max):
                        max_tag = each
                        highest = curr_max

                if index not in backpointer:
                    backpointer[index]={}
                backpointer[index][each_tag] = max_tag

        max_prob_last=0
        max_tag_last=''

        some_list = probability[len(wordlist)-1]
        for each_tag in some_list:
            if(max_prob_last<=probability[len(wordlist)-1][each_tag]):
                max_prob_last=probability[len(wordlist)-1][each_tag]
                max_tag_last=each_tag
        # print(backpointer)
        list_tags = []
        list_tags.append(max_tag_last)

        for i in range(len(wordlist)-1,0,-1):
            back_tag = backpointer[i][max_tag_last]
            list_tags.append(back_tag)
            max_tag_last=back_tag

        list_tags.reverse()

        str = ''
        for i in range(0,len(wordlist)):
            if i!=0 and wordlist[i][0].isupper():
                str += wordlist[i].rstrip() + '/' + 'NP' + ' '
            elif wordlist[i] in (',',';','.','(',')',':','[',']','|'):
                str += wordlist[i].rstrip() + '/' + 'FF' + ' '
            elif wordlist[i][0].isdigit():
                str += wordlist[i].rstrip() + '/' + 'ZZ' + ' '
            else:
                str+=wordlist[i].rstrip()+'/'+list_tags[i]+' '

        str=str.rstrip(' ')
        output.write(str+"\n")

    output.close()

if __name__ == "__main__":
    main()
